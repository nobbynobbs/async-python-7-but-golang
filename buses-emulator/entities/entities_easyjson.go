// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package entities

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3e8ab7adDecodeEmulatorEntities(in *jlexer.Lexer, out *RouteInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "station_start_name":
			out.FirstStationName = string(in.String())
		case "station_stop_name":
			out.LastStationName = string(in.String())
		case "coordinates":
			if in.IsNull() {
				in.Skip()
				out.Coordinates = nil
			} else {
				in.Delim('[')
				if out.Coordinates == nil {
					if !in.IsDelim(']') {
						out.Coordinates = make([]Point, 0, 8)
					} else {
						out.Coordinates = []Point{}
					}
				} else {
					out.Coordinates = (out.Coordinates)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Point
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v2 := 0
						for !in.IsDelim(']') {
							if v2 < 2 {
								(v1)[v2] = float32(in.Float32())
								v2++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Coordinates = append(out.Coordinates, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeEmulatorEntities(out *jwriter.Writer, in RouteInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"station_start_name\":"
		out.RawString(prefix)
		out.String(string(in.FirstStationName))
	}
	{
		const prefix string = ",\"station_stop_name\":"
		out.RawString(prefix)
		out.String(string(in.LastStationName))
	}
	{
		const prefix string = ",\"coordinates\":"
		out.RawString(prefix)
		if in.Coordinates == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Coordinates {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.RawByte('[')
				for v5 := range v4 {
					if v5 > 0 {
						out.RawByte(',')
					}
					out.Float32(float32((v4)[v5]))
				}
				out.RawByte(']')
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RouteInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeEmulatorEntities(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RouteInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeEmulatorEntities(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RouteInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeEmulatorEntities(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RouteInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeEmulatorEntities(l, v)
}
func easyjson3e8ab7adDecodeEmulatorEntities1(in *jlexer.Lexer, out *BusInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "busId":
			out.Id = string(in.String())
		case "route":
			out.Route = string(in.String())
		case "lat":
			out.Lat = float32(in.Float32())
		case "lng":
			out.Lng = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeEmulatorEntities1(out *jwriter.Writer, in BusInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"busId\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"route\":"
		out.RawString(prefix)
		out.String(string(in.Route))
	}
	{
		const prefix string = ",\"lat\":"
		out.RawString(prefix)
		out.Float32(float32(in.Lat))
	}
	{
		const prefix string = ",\"lng\":"
		out.RawString(prefix)
		out.Float32(float32(in.Lng))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BusInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeEmulatorEntities1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BusInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeEmulatorEntities1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BusInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeEmulatorEntities1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BusInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeEmulatorEntities1(l, v)
}
